Scaffolding an API Project
42m 33s
Creating the Go Project
01:56:28 - 02:07:25
Creating an HTTP Server
02:07:26 - 02:14:10
Parsing Command-Line Flags
02:14:11 - 02:18:47
Chi Router
02:18:48 - 02:27:06
API Route Handlers
02:27:07 - 02:39:05
Data Layer
1h 35s
Postgres Database Docker Container
02:39:06 - 02:46:17
pgx Driver for PostgreSQL
02:46:18 - 02:55:48
SQL Migrations with Goose
02:55:49 - 03:13:08
Running Goose Migrations
03:13:09 - 03:20:39
Defining Data Types in Store
03:20:40 - 03:29:12
CreateWorkout Query
03:29:13 - 03:39:46
API CRUD Routes
1h 24m 15s
CreateWorkout Handler
03:39:47 - 03:49:30
Testing CreateWorkout Endpoint with cURL
03:49:31 - 03:55:26
Getting Workouts By ID
03:55:27 - 04:05:25
Updating Workouts
04:05:26 - 04:17:06
Handlers for Getting & Updating Workouts
04:17:07 - 04:33:34
Deleting Workouts
04:33:35 - 04:42:53
JSON Response Writer Refactor
04:42:54 - 04:49:04
Logging & JSON Error Responses
04:49:05 - 05:04:09
Testing Go Applications
38m 20s
Using a Testing Database
05:04:10 - 05:12:26
Connecting to the Test Database
05:12:27 - 05:19:50
Testing CreateWorkout Success
05:19:51 - 05:26:21
Testing CreateWorkout Errors
05:26:22 - 05:35:34
Running Tests in Go
05:35:35 - 05:42:34
Authentication
1h 20m 4s
Managing User Data
05:42:35 - 05:48:25
User SQL Queries
05:48:26 - 05:56:36
Validating User Data
05:56:37 - 06:04:55
Register User API
06:04:56 - 06:09:55
Hashing & Storing User Passwords
06:09:56 - 06:21:57
Token Authentication & OAuth 2.0
06:21:58 - 06:29:04
Creating a Tokens Table
06:29:05 - 06:33:31
Generating JSON Web Tokens
06:33:32 - 06:49:19
Token API Handlers
06:49:20 - 07:00:13
Testing the Authentication Routes
07:00:14 - 07:02:48
Middleware
58m 44s
Getting User Tokens
07:02:49 - 07:10:57
Modifying Request Context
07:10:58 - 07:18:27
Authentication Middleware
07:18:28 - 07:25:24
Protecting Routes with Middleware
07:25:25 - 07:36:31
Adding User ID Migration
07:36:32 - 07:42:19
Validating User Workout Ownership
07:42:20 - 07:53:16
Testing API Endpoints
07:53:17 - 08:01:39
Wrapping Up
1m 54s


==========================
ðŸš€ Future Updates You'll Make:
As you complete each phase, update the progress markers
Add new lesson phases if you implement features not in the instructor's model
Customize the diagrams to match your specific implementation choices
Add your own learning notes and insights
ðŸŽ¯ The Beauty of This System:
Option 6 becomes your personal learning roadmap
Shows exactly where you are in the instructor's progression
Guides you to the next steps you need to implement
Grows with your project as you complete each phase

================================
ðŸŽ¯ What Option 9 Will Generate:
Theory2Reality_progress_analysis.mmd.md - Your actual progress vs theory
Theory2Reality_gap_analysis.mmd.md - What you still need to implement
Theory2Reality_next_steps.mmd.md - Recommended next actions
Theory2Reality_implementation_status.mmd.md - Detailed status breakdown
ðŸš€ Perfect Organization:
Option 6: Instructor's complete teaching progression (static)
Option 9: Your real progress vs theory analysis (dynamic)
Clean separation: Theory2Reality.go is focused and not cluttering Existing_diagrams.go